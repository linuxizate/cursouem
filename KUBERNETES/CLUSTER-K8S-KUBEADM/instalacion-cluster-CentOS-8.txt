################################################	 PASO 1. Instalar containerd	 #################################################

# Antes de comenzar a instalar los componentes de Kubernetes, debemos instalar containerd en todas las máquinas.

# Sigue estos pasos:

# Configurar requisitos previos:
# Cargue dos módulos requeridos y agregue la configuración para que se puedan cargar en el momento del arranque.

sudo modprobe overlay
sudo modprobe br_netfilter

cat <<EOF | sudo tee /etc/modules-load.d/containerd.conf
overlay
br_netfilter
EOF

# Configure otros requisitos previos:

cat <<EOF | sudo tee /etc/sysctl.d/99-kubernetes-cri.conf
net.bridge.bridge-nf-call-iptables = 1
net.ipv4.ip_forward = 1
net.bridge.bridge-nf-call-ip6tables = 1
EOF

# Haga que la configuración anterior sea aplicable sin reiniciar.

sudo sysctl --system

# Instalar containerd
# Agregue el repositorio oficial de Docker.

sudo dnf config-manager --add-repo=https://download.docker.com/linux/centos/docker-ce.repo

# En casi de errores en los repos:
#sudo sed -i -e "s|mirrorlist=|#mirrorlist=|g" /etc/yum.repos.d/CentOS-*
#sudo sed -i -e "s|#baseurl=http://mirror.centos.org|baseurl=http://vault.centos.org|g" /etc/yum.repos.d/CentOS-*

# Actualice su sistema e instale el paquete containerd.

sudo dnf update -y
sudo dnf install -y containerd

# Cree un archivo de configuración para containerd y configúrelo como predeterminado.

sudo mkdir -p /etc/containerd
sudo containerd config default | sudo tee /etc/containerd/config.toml

# Establecer cgroupdriver en systemd
# kubelet requiere que cgroupdriver esté configurado en systemd. Para ello, edite el siguiente archivo:

sudo vi /etc/containerd/config.toml 

# Busque la siguiente sección: [plugins."io.containerd.grpc.v1.cri".containerd.runtimes.runc.options]

# Y cambie el valor de SystemdCgroup a true
# Una vez que haya terminado, haga coincidir la sección de su archivo con lo siguiente:

[plugins."io.containerd.grpc.v1.cri".containerd.runtimes.runc.options]
            BinaryName = ""
            CriuImagePath = ""
            CriuPath = ""
            CriuWorkPath = ""
            IoGid = 0
            IoUid = 0
            NoNewKeyring = false
            NoPivotRoot = false
            Root = ""
            ShimCgroup = ""
            SystemdCgroup = true

# Restart containerd
# Para aplicar los cambios realizados en el último paso, reinicie containerd.

sudo systemctl restart containerd


################################################	PASO 2. Instalar Kubernetes	#################################################

# En este punto, estamos listos para instalar Kubernetes en nuestras máquinas. Repita todos los pasos en ambas máquinas.
# Instalar curl

sudo dnf install curl

# Agregar el repositorio de Kubernetes

sudo vi /etc/yum.repos.d/kubernetes.repo

# Añada a continuación:

[kubernetes]
name=Kubernetes
baseurl=https://packages.cloud.google.com/yum/repos/kubernetes-el7-x86_64
enabled=1
gpgcheck=1
repo_gpgcheck=1
gpgkey=https://packages.cloud.google.com/yum/doc/yum-key.gpg https://packages.cloud.google.com/yum/doc/rpm-package-key.gpg


# Instalar módulos
# Actualice sus máquinas y luego instale todos los módulos de Kubernetes.

sudo dnf update -y
sudo yum list --showduplicates kubeadm --disableexcludes=kubernetes
sudo yum list --showduplicates kubelet --disableexcludes=kubernetes
sudo yum list --showduplicates kubectl --disableexcludes=kubernetes
sudo dnf install -y kubelet-1.24.0-0 kubeadm-1.24.0-0 kubectl-1.24.0-0 --disableexcludes=kubernetes

# Establecer nombres de host: (master y worker1-2)

sudo hostnamectl set-hostname "master"
exec bash

# Asegúrese de ingresar los nombres de host correctos en el archivo /etc/hosts de todos nodos. 

sudo cat <> /etc/hosts
10.20.1.10 master
10.20.1.2 worker1
10.20.1.3 worker2
EOF

# Turn off swap
# Desactivar la swap para todas máquinas.

sudo swapoff -a

# Cometar la linea de swap en el fstab
vi /etc/fstab


# Habilitar kubelet
# Habilite el servicio kubelet en todas máquinas.

sudo systemctl enable kubelet

# Parar Firewall y deshabilitar en todas las máquinas:

systemctl stop firewalld
systemctl disable firewalld


#############################################	 Paso 3. Implemente el clúster	################################################3

# Inicializar clúster
# Finalmente estamos listos para inicializar nuestro clúster. Ejecute este comando en el nodo maestro:

sudo kubeadm init 

# Espera unos minutos a que termine. Una inicialización exitosa producirá una salida similar a esta:

Your Kubernetes control-plane has initialized successfully!

To start using your cluster, you need to run the following as a regular user:

  mkdir -p $HOME/.kube
  sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
  sudo chown $(id -u):$(id -g) $HOME/.kube/config

Alternatively, if you are the root user, you can run:

  export KUBECONFIG=/etc/kubernetes/admin.conf

You should now deploy a pod network to the cluster.
Run "kubectl apply -f [podnetwork].yaml" with one of the options listed at:
  https://kubernetes.io/docs/concepts/cluster-administration/addons/

Then you can join any number of worker nodes by running the following on each as root:

kubeadm join 10.20.1.10:6443 --token uh9zuw.gy0m40a90sd4o3kl \
        --discovery-token-ca-cert-hash sha256:24490dd585768bc80eb9943432d6beadb3


# Copie el comando kubeadm join del final de la salida y guárdelo en un lugar seguro. 
# Usaremos este comando más adelante para permitir que los nodos workers se unan al clúster.

# Si olvida copiar el comando o ya no puede encontrarlo, puede regenerarlo usando el siguiente comando:

sudo kubeadm token create --print-join-command

# Crear directorio
# También indicado por el resultado anterior, necesitamos crear un directorio y cambiar su propietario. 
# Ejecute estos comandos:

mkdir -p $HOME/.kube
sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
sudo chown $(id -u):$(id -g) $HOME/.kube/config

# Implementar la red de pods en el clúster
# A continuación, debemos implementar una red de módulos en nuestro clúster.

curl https://raw.githubusercontent.com/projectcalico/calico/v3.25.0/manifests/calico.yaml -O
kubectl apply -f calico.yaml


# Verifique que el nodo maestro esté listo ahora:

sudo kubectl get nodes

# En este paso, también se recomienda verificar si todos los pods funcionan correctamente.

kubectl get pods --all-namespaces

# Agregar nodo workers:
# Ahora es el momento de pasar a nuestros nodos workers. 
# Ejecute su propio comando kubeadm join del paso 3 en cada uno de los nodos workers para que se una al clúster.

kubeadm join 10.20.1.10:6443 --token uh9zuw.gy0m40a90sd4o3kl \
        --discovery-token-ca-cert-hash sha256:24490dd585768bc80eb9943432d6beadb3


# Espere que la salida tenga las siguientes líneas al final:

This node has joined the cluster:
* Certificate signing request was sent to apiserver and a response was received.
* The Kubelet was informed of the new secure connection details.

Run 'kubectl get nodes' on the control-plane to see this node join the cluster.
Switch back to the master node and run this command to confirm that the worker has indeed joined the cluster:

kubectl get nodes

NAME          STATUS   ROLES                  AGE     VERSION
master-node   Ready    control-plane,master   3m40s   v1.24.1
worker-node   Ready                     83s     v1.24.1


# Establezca el rol para sus nodos workers.

kubectl label node worker-node node-role.kubernetes.io/worker=worker

# Para comprobar que se ha establecido el rol:

kubectl get nodes
NAME          STATUS   ROLES                  AGE     VERSION
master-node   Ready    control-plane,master   5m12s   v1.24.1
worker-node   Ready    worker                 2m55s   v1.24.1














